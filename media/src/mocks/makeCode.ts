export const codes = {
    "demoSdk": {
        "typescript": "// This file is auto-generated, don't edit it\n// 依赖的模块可通过下载工程中的模块依赖文件或右上角的获取 SDK 依赖信息查看\nimport Ecs20140526, * as $Ecs20140526 from '@alicloud/ecs20140526';\nimport OpenApi, * as $OpenApi from '@alicloud/openapi-client';\nimport Util, * as $Util from '@alicloud/tea-util';\nimport * as $tea from '@alicloud/tea-typescript';\n\n\nexport default class Client {\n\n  /**\n   * 使用AK&SK初始化账号Client\n   * @param accessKeyId\n   * @param accessKeySecret\n   * @return Client\n   * @throws Exception\n   */\n  static createClient(accessKeyId: string, accessKeySecret: string): Ecs20140526 {\n    let config = new $OpenApi.Config({\n      // 必填，您的 AccessKey ID\n      accessKeyId: accessKeyId,\n      // 必填，您的 AccessKey Secret\n      accessKeySecret: accessKeySecret,\n    });\n    // Endpoint 请参考 https://api.aliyun.com/product/Ecs\n    config.endpoint = `ecs.cn-qingdao.aliyuncs.com`;\n    return new Ecs20140526(config);\n  }\n\n  static async main(args: string[]): Promise<void> {\n    // 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n    // 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378664.html\n    let client = Client.createClient(process.env['ALIBABA_CLOUD_ACCESS_KEY_ID'], process.env['ALIBABA_CLOUD_ACCESS_KEY_SECRET']);\n    let runInstancesRequest = new $Ecs20140526.RunInstancesRequest({\n      regionId: \"cn-qingdao\",\n    });\n    let runtime = new $Util.RuntimeOptions({ });\n    try {\n      // 复制代码运行请自行打印 API 的返回值\n      await client.runInstancesWithOptions(runInstancesRequest, runtime);\n    } catch (error) {\n      // 错误 message\n      console.log(error.message);\n      // 诊断地址\n      console.log(error.data[\"Recommend\"]);\n      Util.assertAsString(error.message);\n    }    \n  }\n\n}\n\nClient.main(process.argv.slice(2));",
        "java": "// This file is auto-generated, don't edit it. Thanks.\npackage com.aliyun.sample;\n\nimport com.aliyun.tea.*;\n\npublic class Sample {\n\n    /**\n     * 使用AK&SK初始化账号Client\n     * @param accessKeyId\n     * @param accessKeySecret\n     * @return Client\n     * @throws Exception\n     */\n    public static com.aliyun.ecs20140526.Client createClient(String accessKeyId, String accessKeySecret) throws Exception {\n        com.aliyun.teaopenapi.models.Config config = new com.aliyun.teaopenapi.models.Config()\n                // 必填，您的 AccessKey ID\n                .setAccessKeyId(accessKeyId)\n                // 必填，您的 AccessKey Secret\n                .setAccessKeySecret(accessKeySecret);\n        // Endpoint 请参考 https://api.aliyun.com/product/Ecs\n        config.endpoint = \"ecs.cn-qingdao.aliyuncs.com\";\n        return new com.aliyun.ecs20140526.Client(config);\n    }\n\n    public static void main(String[] args_) throws Exception {\n        java.util.List<String> args = java.util.Arrays.asList(args_);\n        // 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n        // 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378657.html\n        com.aliyun.ecs20140526.Client client = Sample.createClient(System.getenv(\"ALIBABA_CLOUD_ACCESS_KEY_ID\"), System.getenv(\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\"));\n        com.aliyun.ecs20140526.models.RunInstancesRequest runInstancesRequest = new com.aliyun.ecs20140526.models.RunInstancesRequest()\n                .setRegionId(\"cn-qingdao\");\n        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();\n        try {\n            // 复制代码运行请自行打印 API 的返回值\n            client.runInstancesWithOptions(runInstancesRequest, runtime);\n        } catch (TeaException error) {\n            // 错误 message\n            System.out.println(error.getMessage());\n            // 诊断地址\n            System.out.println(error.getData().get(\"Recommend\"));\n            com.aliyun.teautil.Common.assertAsString(error.message);\n        } catch (Exception _error) {\n            TeaException error = new TeaException(_error.getMessage(), _error);\n            // 错误 message\n            System.out.println(error.getMessage());\n            // 诊断地址\n            System.out.println(error.getData().get(\"Recommend\"));\n            com.aliyun.teautil.Common.assertAsString(error.message);\n        }        \n    }\n}\n",
        "php": "<?php\n\n// This file is auto-generated, don't edit it. Thanks.\nnamespace AlibabaCloud\\SDK\\Sample;\n\nuse AlibabaCloud\\SDK\\Ecs\\V20140526\\Ecs;\nuse \\Exception;\nuse AlibabaCloud\\Tea\\Exception\\TeaError;\nuse AlibabaCloud\\Tea\\Utils\\Utils;\n\nuse Darabonba\\OpenApi\\Models\\Config;\nuse AlibabaCloud\\SDK\\Ecs\\V20140526\\Models\\RunInstancesRequest;\nuse AlibabaCloud\\Tea\\Utils\\Utils\\RuntimeOptions;\n\nclass Sample {\n\n    /**\n     * 使用AK&SK初始化账号Client\n     * @param string $accessKeyId\n     * @param string $accessKeySecret\n     * @return Ecs Client\n     */\n    public static function createClient($accessKeyId, $accessKeySecret){\n        $config = new Config([\n            // 必填，您的 AccessKey ID\n            \"accessKeyId\" => $accessKeyId,\n            // 必填，您的 AccessKey Secret\n            \"accessKeySecret\" => $accessKeySecret\n        ]);\n        // Endpoint 请参考 https://api.aliyun.com/product/Ecs\n        $config->endpoint = \"ecs.cn-qingdao.aliyuncs.com\";\n        return new Ecs($config);\n    }\n\n    /**\n     * @param string[] $args\n     * @return void\n     */\n    public static function main($args){\n        // 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n        // 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/311677.html\n        $client = self::createClient(getenv(\"ALIBABA_CLOUD_ACCESS_KEY_ID\"), getenv('ALIBABA_CLOUD_ACCESS_KEY_SECRET'));\n        $runInstancesRequest = new RunInstancesRequest([\n            \"regionId\" => \"cn-qingdao\"\n        ]);\n        $runtime = new RuntimeOptions([]);\n        try {\n            // 复制代码运行请自行打印 API 的返回值\n            $client->runInstancesWithOptions($runInstancesRequest, $runtime);\n        }\n        catch (Exception $error) {\n            if (!($error instanceof TeaError)) {\n                $error = new TeaError([], $error->getMessage(), $error->getCode(), $error);\n            }\n            // 错误 message\n            var_dump($error->message);\n            // 诊断地址\n            var_dump($error->data[\"Recommend\"]);\n            Utils::assertAsString($error->message);\n        }\n    }\n}\n$path = __DIR__ . \\DIRECTORY_SEPARATOR . '..' . \\DIRECTORY_SEPARATOR . 'vendor' . \\DIRECTORY_SEPARATOR . 'autoload.php';\nif (file_exists($path)) {\n    require_once $path;\n}\nSample::main(array_slice($argv, 1));\n",
        "python": "# -*- coding: utf-8 -*-\n# This file is auto-generated, don't edit it. Thanks.\nimport os\nimport sys\n\nfrom typing import List\n\nfrom alibabacloud_ecs20140526.client import Client as Ecs20140526Client\nfrom alibabacloud_tea_openapi import models as open_api_models\nfrom alibabacloud_ecs20140526 import models as ecs_20140526_models\nfrom alibabacloud_tea_util import models as util_models\nfrom alibabacloud_tea_util.client import Client as UtilClient\n\n\nclass Sample:\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def create_client(\n        access_key_id: str,\n        access_key_secret: str,\n    ) -> Ecs20140526Client:\n        \"\"\"\n        使用AK&SK初始化账号Client\n        @param access_key_id:\n        @param access_key_secret:\n        @return: Client\n        @throws Exception\n        \"\"\"\n        config = open_api_models.Config(\n            # 必填，您的 AccessKey ID,\n            access_key_id=access_key_id,\n            # 必填，您的 AccessKey Secret,\n            access_key_secret=access_key_secret\n        )\n        # Endpoint 请参考 https://api.aliyun.com/product/Ecs\n        config.endpoint = f'ecs.cn-qingdao.aliyuncs.com'\n        return Ecs20140526Client(config)\n\n    @staticmethod\n    def main(\n        args: List[str],\n    ) -> None:\n        # 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n        # 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378659.html\n        client = Sample.create_client(os.environ['ALIBABA_CLOUD_ACCESS_KEY_ID'], os.environ['ALIBABA_CLOUD_ACCESS_KEY_SECRET'])\n        run_instances_request = ecs_20140526_models.RunInstancesRequest(\n            region_id='cn-qingdao'\n        )\n        runtime = util_models.RuntimeOptions()\n        try:\n            # 复制代码运行请自行打印 API 的返回值\n            client.run_instances_with_options(run_instances_request, runtime)\n        except Exception as error:\n            # 错误 message\n            print(error.message)\n            # 诊断地址\n            print(error.data.get(\"Recommend\"))\n            UtilClient.assert_as_string(error.message)\n\n    @staticmethod\n    async def main_async(\n        args: List[str],\n    ) -> None:\n        # 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n        # 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378659.html\n        client = Sample.create_client(os.environ['ALIBABA_CLOUD_ACCESS_KEY_ID'], os.environ['ALIBABA_CLOUD_ACCESS_KEY_SECRET'])\n        run_instances_request = ecs_20140526_models.RunInstancesRequest(\n            region_id='cn-qingdao'\n        )\n        runtime = util_models.RuntimeOptions()\n        try:\n            # 复制代码运行请自行打印 API 的返回值\n            await client.run_instances_with_options_async(run_instances_request, runtime)\n        except Exception as error:\n            # 错误 message\n            print(error.message)\n            # 诊断地址\n            print(error.data.get(\"Recommend\"))\n            UtilClient.assert_as_string(error.message)\n\n\nif __name__ == '__main__':\n    Sample.main(sys.argv[1:])\n",
        "go": "// This file is auto-generated, don't edit it. Thanks.\npackage main\n\nimport (\n  \"encoding/json\"\n  \"strings\"\n  \"fmt\"\n  \"os\"\n  ecs20140526  \"github.com/alibabacloud-go/ecs-20140526/v3/client\"\n  openapi  \"github.com/alibabacloud-go/darabonba-openapi/v2/client\"\n  util  \"github.com/alibabacloud-go/tea-utils/v2/service\"\n  \"github.com/alibabacloud-go/tea/tea\"\n)\n\n\n/**\n * 使用AK&SK初始化账号Client\n * @param accessKeyId\n * @param accessKeySecret\n * @return Client\n * @throws Exception\n */\nfunc CreateClient (accessKeyId *string, accessKeySecret *string) (_result *ecs20140526.Client, _err error) {\n  config := &openapi.Config{\n    // 必填，您的 AccessKey ID\n    AccessKeyId: accessKeyId,\n    // 必填，您的 AccessKey Secret\n    AccessKeySecret: accessKeySecret,\n  }\n  // Endpoint 请参考 https://api.aliyun.com/product/Ecs\n  config.Endpoint = tea.String(\"ecs.cn-qingdao.aliyuncs.com\")\n  _result = &ecs20140526.Client{}\n  _result, _err = ecs20140526.NewClient(config)\n  return _result, _err\n}\n\nfunc _main (args []*string) (_err error) {\n  // 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n  // 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378661.html\n  client, _err := CreateClient(tea.String(os.Getenv(\"ALIBABA_CLOUD_ACCESS_KEY_ID\")), tea.String(os.Getenv(\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\")))\n  if _err != nil {\n    return _err\n  }\n\n  runInstancesRequest := &ecs20140526.RunInstancesRequest{\n    RegionId: tea.String(\"cn-qingdao\"),\n  }\n  runtime := &util.RuntimeOptions{}\n  tryErr := func()(_e error) {\n    defer func() {\n      if r := tea.Recover(recover()); r != nil {\n        _e = r\n      }\n    }()\n    // 复制代码运行请自行打印 API 的返回值\n    _, _err = client.RunInstancesWithOptions(runInstancesRequest, runtime)\n    if _err != nil {\n      return _err\n    }\n\n    return nil\n  }()\n\n  if tryErr != nil {\n    var error = &tea.SDKError{}\n    if _t, ok := tryErr.(*tea.SDKError); ok {\n      error = _t\n    } else {\n      error.Message = tea.String(tryErr.Error())\n    }\n    // 错误 message\n    fmt.Println(tea.StringValue(error.Message))\n    // 诊断地址\n    var data interface{}\n    d := json.NewDecoder(strings.NewReader(tea.StringValue(error.Data)))\n    d.Decode(&data)\n    if m, ok := data.(map[string]interface{}); ok {\n      recommend, _ := m[\"Recommend\"]\n      fmt.Println(recommend)\n    }\n    _, _err = util.AssertAsString(error.Message)\n    if _err != nil {\n      return _err\n    }\n  }\n  return _err\n}\n\n\nfunc main() {\n  err := _main(tea.StringSlice(os.Args[1:]))\n  if err != nil {\n    panic(err)\n  }\n}\n",
        "python2": "# -*- coding: utf-8 -*-\n# This file is auto-generated, don't edit it. Thanks.\nfrom __future__ import unicode_literals\n\nimport os\nimport sys\n\nfrom alibabacloud_ecs20140526.client import Client as Ecs20140526Client\nfrom alibabacloud_tea_openapi import models as open_api_models\nfrom alibabacloud_ecs20140526 import models as ecs_20140526_models\nfrom alibabacloud_tea_util import models as util_models\nfrom alibabacloud_tea_util.client import Client as UtilClient\n\n\nclass Sample(object):\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def create_client(access_key_id, access_key_secret):\n        \"\"\"\n        使用AK&SK初始化账号Client\n\n        @type access_key_id: str\n        @param access_key_id:\n\n        @type access_key_secret: str\n        @param access_key_secret:\n\n        @return: Client\n        @throws Exception\n        \"\"\"\n        config = open_api_models.Config(\n            # 必填，您的 AccessKey ID,\n            access_key_id=access_key_id,\n            # 必填，您的 AccessKey Secret,\n            access_key_secret=access_key_secret\n        )\n        # Endpoint 请参考 https://api.aliyun.com/product/Ecs\n        config.endpoint = 'ecs.cn-qingdao.aliyuncs.com'\n        return Ecs20140526Client(config)\n\n    @staticmethod\n    def main(args):\n        # 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n        # 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378659.html\n        client = Sample.create_client(os.environ['ALIBABA_CLOUD_ACCESS_KEY_ID'], os.environ['ALIBABA_CLOUD_ACCESS_KEY_SECRET'])\n        run_instances_request = ecs_20140526_models.RunInstancesRequest(\n            region_id='cn-qingdao'\n        )\n        runtime = util_models.RuntimeOptions()\n        try:\n            # 复制代码运行请自行打印 API 的返回值\n            client.run_instances_with_options(run_instances_request, runtime)\n        except Exception as error:\n            # 错误 message\n            print error.message\n            # 诊断地址\n            print error.data.get(\"Recommend\")\n            UtilClient.assert_as_string(error.message)\n\n\nif __name__ == '__main__':\n    Sample.main(sys.argv[1:])\n",
        "csharp": "// This file is auto-generated, don't edit it. Thanks.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\nusing Tea;\nusing Tea.Utils;\n\n\nnamespace AlibabaCloud.SDK.Sample\n{\n    public class Sample \n    {\n\n        /**\n         * 使用AK&SK初始化账号Client\n         * @param accessKeyId\n         * @param accessKeySecret\n         * @return Client\n         * @throws Exception\n         */\n        public static AlibabaCloud.SDK.Ecs20140526.Client CreateClient(string accessKeyId, string accessKeySecret)\n        {\n            AlibabaCloud.OpenApiClient.Models.Config config = new AlibabaCloud.OpenApiClient.Models.Config\n            {\n                // 必填，您的 AccessKey ID\n                AccessKeyId = accessKeyId,\n                // 必填，您的 AccessKey Secret\n                AccessKeySecret = accessKeySecret,\n            };\n            // Endpoint 请参考 https://api.aliyun.com/product/Ecs\n            config.Endpoint = \"ecs.cn-qingdao.aliyuncs.com\";\n            return new AlibabaCloud.SDK.Ecs20140526.Client(config);\n        }\n\n        public static void Main(string[] args)\n        {\n            // 请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID 和 ALIBABA_CLOUD_ACCESS_KEY_SECRET。\n            // 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例使用环境变量获取 AccessKey 的方式进行调用，仅供参考，建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378671.html\n            AlibabaCloud.SDK.Ecs20140526.Client client = CreateClient(Environment.GetEnvironmentVariable(\"ALIBABA_CLOUD_ACCESS_KEY_ID\"), Environment.GetEnvironmentVariable(\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\"));\n            AlibabaCloud.SDK.Ecs20140526.Models.RunInstancesRequest runInstancesRequest = new AlibabaCloud.SDK.Ecs20140526.Models.RunInstancesRequest\n            {\n                RegionId = \"cn-qingdao\",\n            };\n            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();\n            try\n            {\n                // 复制代码运行请自行打印 API 的返回值\n                client.RunInstancesWithOptions(runInstancesRequest, runtime);\n            }\n            catch (TeaException error)\n            {\n                // 错误 message\n                Console.WriteLine(error.Message);\n                // 诊断地址\n                Console.WriteLine(error.Data[\"Recommend\"]);\n                AlibabaCloud.TeaUtil.Common.AssertAsString(error.Message);\n            }\n            catch (Exception _error)\n            {\n                TeaException error = new TeaException(new Dictionary<string, object>\n                {\n                    { \"message\", _error.Message }\n                });\n                // 错误 message\n                Console.WriteLine(error.Message);\n                // 诊断地址\n                Console.WriteLine(error.Data[\"Recommend\"]);\n                AlibabaCloud.TeaUtil.Common.AssertAsString(error.Message);\n            }\n        }\n\n\n    }\n}\n",
        "swift": "#!/usr/bin/env xcrun swift\n\nimport Cocoa\nimport Foundation\nimport Tea\nimport AlibabacloudEcs20140526\nimport AlibabacloudOpenApi\nimport TeaUtils\n\nopen class Client {\n    public static func createClient(_ accessKeyId: String?, _ accessKeySecret: String?) throws -> AlibabacloudEcs20140526.Client {\n        var config: AlibabacloudOpenApi.Config = AlibabacloudOpenApi.Config([\n            \"accessKeyId\": accessKeyId as! String,\n            \"accessKeySecret\": accessKeySecret as! String\n        ])\n        config.endpoint = \"ecs.cn-qingdao.aliyuncs.com\"\n        return AlibabacloudEcs20140526.Client(config)\n    }\n\n    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)\n    public static func main(_ args: [String]?) async throws -> Void {\n        var client: AlibabacloudEcs20140526.Client = try Client.createClient(ProcessInfo.processInfo.environment[\"ALIBABA_CLOUD_ACCESS_KEY_ID\"], ProcessInfo.processInfo.environment[\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\"])\n        var runInstancesRequest: AlibabacloudEcs20140526.RunInstancesRequest = AlibabacloudEcs20140526.RunInstancesRequest([\n            \"regionId\": \"cn-qingdao\"\n        ])\n        var runtime: TeaUtils.RuntimeOptions = TeaUtils.RuntimeOptions([:])\n        do {\n            try await client.runInstancesWithOptions(runInstancesRequest as! AlibabacloudEcs20140526.RunInstancesRequest, runtime as! TeaUtils.RuntimeOptions)\n        }\n        catch {\n            if error is Tea.TeaError {\n                try TeaUtils.Client.assertAsString(error.message)\n            } else {\n                throw error\n            }\n        }\n    }\n}\n\nClient.main(CommandLine.arguments)\n",
        "java-async": "// This file is auto-generated, don't edit it. Thanks.\npackage demo;\n\nimport com.aliyun.auth.credentials.Credential;\nimport com.aliyun.auth.credentials.provider.StaticCredentialProvider;\nimport com.aliyun.core.http.HttpClient;\nimport com.aliyun.core.http.HttpMethod;\nimport com.aliyun.core.http.ProxyOptions;\nimport com.aliyun.httpcomponent.httpclient.ApacheAsyncHttpClientBuilder;\nimport com.aliyun.sdk.service.ecs20140526.models.*;\nimport com.aliyun.sdk.service.ecs20140526.*;\nimport com.google.gson.Gson;\nimport darabonba.core.RequestConfiguration;\nimport darabonba.core.client.ClientOverrideConfiguration;\nimport darabonba.core.utils.CommonUtil;\nimport darabonba.core.TeaPair;\n\n//import javax.net.ssl.KeyManager;\n//import javax.net.ssl.X509TrustManager;\nimport java.net.InetSocketAddress;\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RunInstances {\n    public static void main(String[] args) throws Exception {\n\n        // HttpClient Configuration\n        /*HttpClient httpClient = new ApacheAsyncHttpClientBuilder()\n                .connectionTimeout(Duration.ofSeconds(10)) // Set the connection timeout time, the default is 10 seconds\n                .responseTimeout(Duration.ofSeconds(10)) // Set the response timeout time, the default is 20 seconds\n                .maxConnections(128) // Set the connection pool size\n                .maxIdleTimeOut(Duration.ofSeconds(50)) // Set the connection pool timeout, the default is 30 seconds\n                // Configure the proxy\n                .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"<your-proxy-hostname>\", 9001))\n                        .setCredentials(\"<your-proxy-username>\", \"<your-proxy-password>\"))\n                // If it is an https connection, you need to configure the certificate, or ignore the certificate(.ignoreSSL(true))\n                .x509TrustManagers(new X509TrustManager[]{})\n                .keyManagers(new KeyManager[]{})\n                .ignoreSSL(false)\n                .build();*/\n\n        // Configure Credentials authentication information, including ak, secret, token\n        StaticCredentialProvider provider = StaticCredentialProvider.create(Credential.builder()\n                // Please ensure that the environment variables ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set.\n                .accessKeyId(System.getenv(\"ALIBABA_CLOUD_ACCESS_KEY_ID\"))\n                .accessKeySecret(System.getenv(\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\"))\n                //.securityToken(System.getenv(\"ALIBABA_CLOUD_SECURITY_TOKEN\")) // use STS token\n                .build());\n\n        // Configure the Client\n        AsyncClient client = AsyncClient.builder()\n                .region(\"cn-qingdao\") // Region ID\n                //.httpClient(httpClient) // Use the configured HttpClient, otherwise use the default HttpClient (Apache HttpClient)\n                .credentialsProvider(provider)\n                //.serviceConfiguration(Configuration.create()) // Service-level configuration\n                // Client-level configuration rewrite, can set Endpoint, Http request parameters, etc.\n                .overrideConfiguration(\n                        ClientOverrideConfiguration.create()\n                                  // Endpoint 请参考 https://api.aliyun.com/product/Ecs\n                                .setEndpointOverride(\"ecs.cn-qingdao.aliyuncs.com\")\n                        //.setConnectTimeout(Duration.ofSeconds(30))\n                )\n                .build();\n\n        // Parameter settings for API request\n        RunInstancesRequest runInstancesRequest = RunInstancesRequest.builder()\n                .regionId(\"cn-qingdao\")\n                // Request-level configuration rewrite, can set Http request parameters, etc.\n                // .requestConfiguration(RequestConfiguration.create().setHttpHeaders(new HttpHeaders()))\n                .build();\n\n        // Asynchronously get the return value of the API request\n        CompletableFuture<RunInstancesResponse> response = client.runInstances(runInstancesRequest);\n        // Synchronously get the return value of the API request\n        RunInstancesResponse resp = response.get();\n        System.out.println(new Gson().toJson(resp));\n        // Asynchronous processing of return values\n        /*response.thenAccept(resp -> {\n            System.out.println(new Gson().toJson(resp));\n        }).exceptionally(throwable -> { // Handling exceptions\n            System.out.println(throwable.getMessage());\n            return null;\n        });*/\n\n        // Finally, close the client\n        client.close();\n    }\n\n}\n",
        "dependencies": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.aliyun</groupId>\n  <artifactId>sample</artifactId>\n  <version>1.0.0</version>\n  <packaging>jar</packaging>\n  <name>sample</name>\n  <licenses>\n    <license>\n      <name>The Apache License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n    </license>\n  </licenses>\n  <developers>\n    <developer>\n      <id>aliyunproducts</id>\n      <name>Aliyun SDK</name>\n      <email>aliyunsdk@aliyun.com</email>\n    </developer>\n  </developers>\n  <properties>\n    <java.version>1.8</java.version>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>com.aliyun</groupId>\n      <artifactId>alibabacloud-ecs20140526</artifactId>\n      <version>2.0.12</version>\n    </dependency>\n    <dependency>\n      <groupId>com.aliyun</groupId>\n      <artifactId>aliyun-gateway-pop</artifactId>\n      <version>0.1.5-beta</version>\n    </dependency>\n    <dependency>\n      <groupId>com.aliyun</groupId>\n      <artifactId>aliyun-gateway-oss</artifactId>\n      <version>0.1.5-beta</version>\n    </dependency>\n    <dependency>\n      <groupId>com.aliyun</groupId>\n      <artifactId>aliyun-gateway-sls</artifactId>\n      <version>0.1.5-beta</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.6.1</version>\n        <configuration>\n          <source>${maven.compiler.source}</source>\n          <target>${maven.compiler.target}</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>"
    },
    "apiInfo": {
        "apiStyle": "RPC",
        "product": "Ecs",
        "method": "POST,GET",
        "apiVersion": "2014-05-26",
        "apiName": "RunInstances",
        "regionId": "cn-qingdao"
    },
    "cost": 628
}